#last review done for eslint 0.16.1

ecmaFeatures:
  jsx: true
  
env:
  browser: true
  es6: true
  node: true
  
globals:
  brackets: false
  define: false
  $: false
  
rules:
  #Possible Errors  
  comma-dangle: [2, "never"] #disallow trailing commas
  no-comma-dangle: 0 #deprecated as of eslint 0.16.0
  no-cond-assign: 2 #disallow assignment in conditional expressions
  no-console: 2 #disallow use of console - use logging library instead
  no-constant-condition: 2 #disallow use of constant expressions in conditions
  no-control-regex: 2 #disallow control characters in regular expressions
  no-debugger: 2 #disallow use of debugger
  no-dupe-keys: 2 #disallow duplicate keys when creating object literals
  no-empty: 2 #disallow empty statements
  no-empty-class: 2 #disallow the use of empty character classes in regular expressions
  no-ex-assign: 2 #disallow assigning to the exception in a catch block
  no-extra-boolean-cast: 2 #disallow double-negation boolean casts in a boolean context
  no-extra-parens: 2 #disallow unnecessary parentheses
  no-extra-semi: 2 #disallow unnecessary semicolons
  no-func-assign: 2 #disallow overwriting functions written as function declarations
  no-inner-declarations: [2, "both"] #disallow function or variable declarations in nested blocks
  no-invalid-regexp: 2 #disallow invalid regular expression strings in the RegExp constructor
  no-irregular-whitespace: 2 #disallow irregular whitespace outside of strings and comments
  no-negated-in-lhs: 2 #disallow negation of the left operand of an in expression
  no-obj-calls: 2 #disallow the use of object properties of the global object (Math and JSON) as functions
  no-regex-spaces: 2 #disallow multiple spaces in a regular expression literal
  no-reserved-keys: 2 #disallow reserved words being used as object literal keys
  no-sparse-arrays: 2 #disallow sparse arrays
  no-unreachable: 2 #disallow unreachable statements after a return, throw, continue, or break statement
  use-isnan: 2 #disallow comparisons with the value NaN
  valid-jsdoc: 0 #ensure JSDoc comments are valid
  valid-typeof: 2 #ensure that the results of typeof are compared against a valid string
  
  #Best Practices  
  block-scoped-var: 2 #treat var statements as if they were block scoped
  complexity: 0 #specify the maximum cyclomatic complexity allowed in a program
  consistent-return: 2 #require return statements to either always or never specify values
  curly: [2, "all"] #specify curly brace conventions for all control statements
  default-case: 2 #require default case in switch statements
  dot-notation: 2 #encourages use of dot notation whenever possible
  eqeqeq: [2, "smart"] #require the use of === and !==
  guard-for-in: 2 #make sure for-in loops have an if statement
  no-alert: 2 #disallow the use of alert, confirm, and prompt
  no-caller: 2 #disallow use of arguments.caller or arguments.callee
  no-div-regex: 2 #disallow division operators explicitly at beginning of regular expression
  no-else-return: 2 #disallow else after a return in an if
  no-empty-label: 2 #disallow use of labels for anything other then loops and switches
  no-eq-null: 0 #disallow comparisons to null without a type-checking operator
  no-eval: 2 #disallow use of eval()
  no-extend-native: 2 #disallow adding to native types
  no-extra-bind: 2 #disallow unnecessary function binding
  no-fallthrough: 2 #disallow fallthrough of case statements
  no-floating-decimal: 2 #disallow the use of leading or trailing decimal points in numeric literals
  no-implied-eval: 2 #disallow use of eval()-like methods
  no-iterator: 2 #disallow usage of __iterator__ property
  no-labels: 2 #disallow use of labeled statements
  no-lone-blocks: 2 #disallow unnecessary nested blocks
  no-loop-func: 2 #disallow creation of functions within loops
  no-multi-spaces: 1 #disallow use of multiple spaces
  no-multi-str: 2 #disallow use of multiline strings
  no-native-reassign: 2 #disallow reassignments of native objects
  no-new: 2 #disallow use of new operator when not part of the assignment or comparison
  no-new-func: 2 #disallow use of new operator for Function object
  no-new-wrappers: 2 #disallows creating new instances of String,Number, and Boolean
  no-octal: 2 #disallow use of octal literals
  no-octal-escape: 2 #disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
  no-process-env: 1 #disallow use of process.env
  no-proto: 2 #disallow usage of __proto__ property
  no-redeclare: 2 #disallow declaring the same variable more then once
  no-return-assign: 2 #disallow use of assignment in return statement
  no-script-url: 2 #disallow use of javascript: urls
  no-self-compare: 2 #disallow comparisons where both sides are exactly the same
  no-sequences: 2 #disallow use of comma operator
  no-throw-literal: 2 #restrict what can be thrown as an exception
  no-unused-expressions: 2 #disallow usage of expressions in statement position
  no-void: 2 #disallow use of void operator
  no-warning-comments: 0 #disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
  no-with: 2 #disallow use of the with statement
  radix: 2 #require use of the second argument for parseInt()
  vars-on-top: 0 #requires to declare all vars on top of their containing scope
  wrap-iife: 2 #require immediate function invocation to be wrapped in parentheses
  yoda: 2 #require or disallow Yoda conditions
  
  #Strict Mode
  global-strict: 0 #deprecated
  no-extra-strict: 0 #deprecated
  strict: [2, "function"] #controls location of Use Strict Directives
  
  #Variables
  no-catch-shadow: 2 #disallow the catch clause parameter name being the same as a variable in the outer scope
  no-delete-var: 2 #disallow deletion of variables
  no-label-var: 2 #disallow labels that share a name with a variable
  no-shadow: 2 #disallow declaration of variables already declared in the outer scope
  no-shadow-restricted-names: 2 #disallow shadowing of names such as arguments
  no-undef: 2 #disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undef-init: 2 #disallow use of undefined when initializing variables
  no-undefined: 2 #disallow use of undefined variable
  no-unused-vars: 2 #disallow declaration of variables that are not used in the code
  no-use-before-define: 2 #disallow use of variables before they are defined
  
  #Stylistic Issues
  indent: [1, 2] #this option sets a specific tab width for your code
  brace-style: [1, "1tbs", { "allowSingleLine": true }] #enforce one true brace style
  camelcase: 1 #require camel case names
  comma-spacing: [1, {"before": false, "after": true}] #enforce spacing before and after comma
  comma-style: [1, "last"] #enforce one true comma style
  consistent-this: [2, "_this"] #enforces consistent naming when capturing the current execution context
  eol-last: 1 #enforce newline at the end of file, with no multiple empty lines
  func-names: 0 #require function expressions to have a name
  func-style: 0 #enforces use of function declarations or expressions
  key-spacing: [1, { "beforeColon": false, "afterColon": true }] #enforces spacing between keys and values in object literal properties
  max-nested-callbacks: [2, 5] #specify the maximum depth callbacks can be nested
  new-cap: 2 #require a capital letter for constructors
  new-parens: 2 #disallow the omission of parentheses when invoking a constructor with no arguments
  no-array-constructor: 2 #disallow use of the Array constructor
  no-inline-comments: 0 #disallow comments inline after code
  no-lonely-if: 2 #disallow if as the only statement in an else block
  no-mixed-spaces-and-tabs: 1 #disallow mixed spaces and tabs for indentation
  no-multiple-empty-lines: 1 #disallow multiple empty lines
  no-nested-ternary: 2 #disallow nested ternary expressions
  no-new-object: 2 #disallow use of the Object constructor
  no-space-before-semi: 0 #deprecated as of eslint 0.16.0
  no-spaced-func: 1 #disallow space between function identifier and application
  no-ternary: 0 #disallow the use of ternary operators
  no-trailing-spaces: 1 #disallow trailing whitespace at the end of lines
  no-underscore-dangle: 0 #disallow dangling underscores in identifiers
  no-wrap-func: 2 #disallow wrapping of non-IIFE statements in parens
  one-var: 0 #allow just one var statement per function
  operator-assignment: 0 #require assignment operator shorthand where possible or prohibit it entirely
  padded-blocks: 0 #enforce padding within blocks
  quote-props: [2, "as-needed"] #require quotes around object literal property names
  quotes: [1, "single"] #specify whether double or single quotes should be used
  semi: [2, "always"] #require or disallow use of semicolons instead of ASI
  semi-spacing: [1, {"before": false, "after": true}] #enforce spacing before and after semicolons
  sort-vars: 0 #sort variables within the same declaration block
  space-after-function-name: 0 #deprecated
  space-after-keywords: [1, "always"] #require a space after certain keywords
  space-before-blocks: [1, "always"] #require or disallow space before blocks
  space-before-function-parentheses: [1, {"anonymous": "always", "named": "never"}] #require or disallow space before function parentheses
  space-in-brackets: [1, "never"] #require or disallow spaces inside brackets
  space-in-parens: [1, "never"] #require or disallow spaces inside parentheses
  space-infix-ops: 1 #require spaces around operators
  space-return-throw-case: 2 #require a space after return, throw, and case
  space-unary-ops: 2 #require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
  spaced-line-comment: 0 #require or disallow a space immediately following the // in a line comment
  wrap-regex: 0 #require regex literals to be wrapped in parentheses
  no-var: 2 #require let or const instead of var
  generator-star: [2, "start"] #enforce the position of the * in generator functions
  
  #Legacy
  max-depth: [2, 5] #specify the maximum depth that blocks can be nested
  max-len: [1, 120] #specify the maximum length of a line in your program
  max-params: [2, 5] #limits the number of parameters that can be used in the function declaration.
  max-statements: [1, 50] #specify the maximum number of statement allowed in a function
  no-bitwise: 2 #disallow use of bitwise operators
  no-plusplus: 0 #disallow use of unary operators, ++ and --
